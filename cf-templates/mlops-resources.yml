AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Prefix:
    Type: String
    Default: dev

  ImageRepoName:
    Type: String
    Description: Name of the ECR repo without the image name

  ImageTagName:
    Type: String
    Description: Name of the ECR image tag

  ModelName:
    Type: String
    Description: Name of the model

  DatasetKeyPath:
    Type: String
    Description: Path of the S3 bucket that CodePipeline should find a sagemaker jobfile

Resources:
    MLArtifactStore:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: !Sub ${Prefix}-s3-ml-artifact
        AccessControl: Private
        VersioningConfiguration:
          Status: Enabled

    MLOpsBucket:
        Type: AWS::S3::Bucket
        Properties: 
          BucketName: !Sub ${Prefix}-s3-ml-dataset
          AccessControl: Private
          VersioningConfiguration:
            Status: Enabled

    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: ${Prefix}-ecr-repo

    CheckModelLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub ${Prefix}-iam-check-model-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /service-role/
        Policies:
          -
            PolicyName: "TempAccessAll"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "*"
                  Resource:
                    - "*"

    TrainModelLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub ${Prefix}-iam-train-model-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /service-role/
        Policies:
          -
            PolicyName: "TempAccessAll"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "*"
                  Resource:
                    - "*"
    
    CheckModelLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub ${Prefix}-lambda-check-model
        Description: A test lambda
        Runtime: python3.7
        Code: 
          ZipFile: !Sub |
            import boto3
  
            sagemaker = boto3.client('sagemaker')
            cloudwatch_events = boto3.client('events')
            codepipeline = boto3.client('codepipeline')
  
            def lambda_handler(event, context):
              pipeline_name = '${AWS::StackName}'
              result = None
              token = None
  
              try:
                response = codepipeline.get_pipeline_state( name=pipeline_name )
                executionId = response['stageStates'][0]['latestExecution']['pipelineExecutionId']
                
                # Get the approve train status token
                for stageState in response['stageStates']:
                  if stageState['stageName'] == 'TrainApproval':
                    for actionState in stageState['actionStates']:
                      if actionState['actionName'] == 'ApproveTrain':
                        latestExecution = actionState['latestExecution']
                        if latestExecution['status'] != 'InProgress':
                          raise(Exception("Train approval is not awaiting for approval: %s" % latestExecution['status']))
                        token = latestExecution['token']
  
                if token is None:
                  raise(Exception("Action token wasn't found. Aborting..."))
                    
                response = sagemaker.describe_training_job( 
                  TrainingJobName='mlops-${ModelName}-%s' % executionId )
                
                status = response['TrainingJobStatus']
                print(status)
                
                if status == "Completed":
                  result={
                    'summary': 'Model trained successfully',
                    'status': 'Approved'
                  }
                elif status == "InProgress":
                  return "Training (%s) in progress" % executionId
                else:
                  result={
                    'summary': response['FailureReason'],
                    'status': 'Rejected'
                  }
              except Exception as e:
                result={
                  'summary': str(e),
                  'status': 'Rejected'
                }
              
              codepipeline.put_approval_result(
                pipelineName=pipeline_name,
                stageName='TrainApproval',
                actionName='ApproveTrain',
                result=result,
                token=token
              )
              # disable monitoring event
              cloudwatch_events.disable_rule( Name='mlops-job-monitor-${ModelName}')
              
              return "Done"
        Handler: index.lambda_handler
        Role: 
          Fn::GetAtt:
            - CheckModelLambdaRole
            - Arn
      DependsOn: CheckModelLambdaRole

    TrainModelLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub ${Prefix}-lambda-train-model
        Description: A test lambda
        Runtime: python3.7
        Code: 
          ZipFile: !Sub |
            import boto3
            import io
            import zipfile
            import json
  
            s3 = boto3.client('s3')
            sagemaker = boto3.client('sagemaker')
            cloudwatch_events = boto3.client('events')
            codepipeline = boto3.client('codepipeline')
  
            def lambda_handler(event, context):
                pipeline_name='${AWS::StackName}'
                
                jobId = event["CodePipeline.job"]["id"]
                accountId = event["CodePipeline.job"]["accountId"]
                trainingJob = None
                try:
                    response = codepipeline.get_pipeline_state( name=pipeline_name )
                    executionId = response['stageStates'][0]['latestExecution']['pipelineExecutionId']
                    
                    print('Start training job for jobid[%s] executionId[%s]' % (jobId, executionId))
                    
                    for inputArtifacts in event["CodePipeline.job"]["data"]["inputArtifacts"]:
                        if inputArtifacts['name'] == 'ModelSourceOutput':
                            s3Location = inputArtifacts['location']['s3Location']
                            zip_bytes = s3.get_object(Bucket=s3Location['bucketName'], Key=s3Location['objectKey'])['Body'].read()
                            with zipfile.ZipFile(io.BytesIO(zip_bytes), "r") as z:
                                trainingJob = json.loads(z.read('trainingjob.json').decode('ascii'))
                    
                    params_deploy = {
                        "Parameters": {
                            "ImageRepoName": "${ImageRepoName}",
                            "ImageTagName": "${ImageTagName}",
                            "ModelName": "${ModelName}",
                            "TrainJobId": executionId
                        }
                    }
                    for outputArtifacts in event["CodePipeline.job"]["data"]["outputArtifacts"]:
                        if outputArtifacts['name'] == 'ModelTrainOutput':
                            s3Location = outputArtifacts['location']['s3Location']
                            
                            zip_bytes = io.BytesIO()
                            with zipfile.ZipFile(zip_bytes, "w") as z:
                                z.writestr('assets/deploy-model.json', json.dumps(params_deploy))
                              
                            zip_bytes.seek(0)
                            s3.put_object(Bucket=s3Location['bucketName'], Key=s3Location['objectKey'], Body=zip_bytes.read())
                
                    if trainingJob is None:
                        raise(Exception("trainingjob.json wasn't found"))
                    
                    # launch training job
                    trainingJob['TrainingJobName'] = 'mlops-${ModelName}-%s' % executionId
                    trainingJob['Tags'].append({'Key': 'jobid', 'Value': jobId})
                    print(trainingJob)
                    sagemaker.create_training_job(**trainingJob)
                    
                    # enable monitoring event
                    cloudwatch_events.enable_rule( Name='mlops-job-monitor-${ModelName}')
  
                    # and update codepipeline
                    codepipeline.put_job_success_result(jobId=jobId)
                except Exception as e:
                    print(e)
                    resp = codepipeline.put_job_failure_result(
                        jobId=jobId,
                        failureDetails={
                            'type': 'ConfigurationError',
                            'message': str(e),
                            'externalExecutionId': context.aws_request_id
                        }
                    )
                return 'Done'
        Handler: index.lambda_handler
        Role: 
          Fn::GetAtt:
            - CheckModelLambdaRole
            - Arn
      DependsOn: TrainModelLambdaRole

    MLOpsPipelineRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub ${Prefix}-iam-pipeline
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "codepipeline.amazonaws.com"
                  - "codebuild.amazonaws.com"
                  - "codedeploy.amazonaws.com"
                  - "cloudformation.amazonaws.com"
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /service-role/
        Policies:
          -
            PolicyName: "CodeBuildAccessPolicies"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "*"
                  Resource:
                    - "*"

    DeployPipeline:
      Type: "AWS::CodePipeline::Pipeline"
      Properties:
        Name: !Sub ${Prefix}-mlops-pipeline
        RoleArn: !GetAtt MLOpsPipelineRole.Arn
        ArtifactStore:
            Type: S3
            Location: !Ref MLArtifactStore
        Stages:
          -
            Name: Source
            Actions: 
              - 
                Name: SourceAction
                ActionTypeId: 
                  Category: Source
                  Owner: AWS
                  Version: 1
                  Provider: S3
                OutputArtifacts: 
                  - 
                    Name: ModelSourceOutput
                Configuration: 
                  S3Bucket: !Ref MLOpsBucket
                  S3ObjectKey: temp.yml
                RunOrder: 1
          # - 
          #   Name: Build
          #   Actions:
          #     - Name: BuildImage
          #       InputArtifacts:
          #         - Name: Source
          #       ActionTypeId:
          #         Category: Build
          #         Owner: AWS
          #         Version: 1
          #         Provider: CodeBuild
          #       Configuration:
          #           ProjectName:
          #             Ref: CodeBuildProject
          #       OutputArtifacts:
          #         - Name: GitCodebase
          #       RunOrder: 2
          -
            Name: TrainModel
            Actions:
              -
                Name: TrainModelAction
                InputArtifacts:
                  - Name: ModelSourceOutput
                OutputArtifacts:
                  -
                    Name: ModelTrainOutput
                ActionTypeId:
                  Category: Invoke
                  Owner: AWS
                  Version: 1
                  Provider: Lambda
                Configuration:
                    FunctionName: !Ref CheckModelLambdaFunction
                RunOrder: 3
          - 
            Name: TrainApproval
            Actions:
              -
                Name: TrainApprovalAction
                ActionTypeId:
                  Category: Approval
                  Owner: AWS
                  Version: 1
                  Provider: Manual
                Configuration:
                    CustomData: 'Was this model trained successfully?'
                RunOrder: 4
          -
            Name: CheckModel
            Actions:
              -
                Name: TrainModel
                InputArtifacts:
                  - Name: ModelTrainOutput
                OutputArtifacts:
                  -
                    Name: CheckModelOutput
                ActionTypeId:
                  Category: Invoke
                  Owner: AWS
                  Version: 1
                  Provider: Lambda
                Configuration:
                    FunctionName: !Ref TrainModelLambdaFunction
                RunOrder: 5

      DependsOn: 
        - CheckModelLambdaFunction 
        - TrainModelLambdaFunction
        - MLOpsPipelineRole 
        - MLOpsBucket    