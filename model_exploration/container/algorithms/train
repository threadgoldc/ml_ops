#!/usr/bin/env python

from __future__ import print_function


import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Reshape, LSTM, Input
from keras.utils import np_utils

from sklearn import metrics
from sklearn.metrics import classification_report


import matplotlib.pyplot as plt
import seaborn as sns

from scipy import stats
import numpy as np
from sklearn.model_selection import train_test_split

import pandas as pd


import os
import json
import pickle
import sys


# These are the paths to where SageMaker mounts interesting things in your container.

prefix = './opt/ml/' #check whether .

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
#param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)







# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
       #with open(param_path, 'r') as tc:
        #    trainingParams = json.load(tc)

        # Take the set of files and read them all into a single pandas dataframe
        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [ pd.read_csv(file) for file in input_files ]
        train_data = pd.concat(raw_data)

        print(train_data.iloc[0])

        X_train, X_test, y_train, y_test = preprocess(train_data, testSize=0.2) #anyways, we do not care about the holdout atm

        model_lstm=lstm_model()

        BATCH_SIZE = 400
        EPOCHS = 2

        history = model_lstm.fit(X_train,
                      y_train,
                      batch_size=BATCH_SIZE,
                      epochs=EPOCHS,
                      validation_split=0.3,
                      verbose=1)

        # save the model
        with open(os.path.join(model_path, 'lstm-model.pkl'), 'wb') as out:
            pickle.dump(history, out)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

def preprocess(df, timeSteps=400, step=20, testSize=0.2):
    '''preprocessing and split'''
    features=3
    RANDOM_SEED = 1992
    segments = []
    labels = []

    print('Preprocessing started')


    for i in range(0, len(df) - timeSteps, step):
        xs = df['x-axis'].values[i: i + timeSteps]
        ys = df['y-axis'].values[i: i + timeSteps]
        zs = df['z-axis'].values[i: i + timeSteps]
        label = stats.mode(df['activity'][i: i + timeSteps])[0][0]
        segments.append([xs, ys, zs])
        labels.append(label)
    reshaped_segments = np.asarray(segments, dtype= np.float32).reshape(-1, timeSteps, features)
    labels = np.asarray(pd.get_dummies(labels), dtype = np.float32)

    print('Preprocessing completed')

    return train_test_split(
        reshaped_segments, labels, test_size=testSize, random_state=RANDOM_SEED)


def lstm_model(units = 32, num_classes = 6):
    '''add descr'''

    model_lstm = Sequential()
    model_lstm.add(LSTM(units, return_sequences=True))
    model_lstm.add(LSTM(units, return_sequences=False))
    model_lstm.add(Dense(num_classes, activation = 'softmax'))

    model_lstm.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])

    return model_lstm


if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
